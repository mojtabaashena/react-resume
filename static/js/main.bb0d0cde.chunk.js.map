{"version":3,"sources":["Components/Header.js","Components/About.js","Components/Menue.js","Components/Skills.js","App.js","serviceWorker.js","index.js"],"names":["Header","name","data","main","occupation","description","city","address","networks","social","map","network","id","url","className","Component","About","bio","style","backgroundColor","this","props","themeColor","Menue","href","title","Skills","skillmessage","resume","skills","key","alt","src","imagepath","App","state","setState","RandomColor","call","console","log","snowflakeCount","color","onClick","changeColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y2EAgCeA,E,uKA1BX,IAAIC,EAAOC,EAAKC,KAAKF,KACjBG,EAAaF,EAAKC,KAAKC,WACvBC,EAAcH,EAAKC,KAAKE,YACxBC,EAAOJ,EAAKC,KAAKI,QAAQD,KACzBE,EAAWN,EAAKC,KAAKM,OAAOC,KAAI,SAAUC,GAC1C,OACI,kBAAC,aAAD,CAAYC,GAAID,EAAQV,KAAMY,IAAKF,EAAQE,SAInD,OACE,6BAASD,GAAG,OAAOE,UAAU,QAC3B,mCAASb,EAAT,KACA,4BACGG,EADH,OACmBE,GAEf,2BAAID,EAAJ,KACA,6BACA,wBAAIS,UAAU,UACTN,Q,GArBIO,aCkBNC,E,uKAhBT,IAAIC,EAAMf,EAAKC,KAAKc,IAEtB,OAEM,6BAASL,GAAG,QAAQE,UAAU,UAAUI,MAAO,CAACC,gBAAiBC,KAAKC,MAAMC,aAC3E,wCAEA,2BAAIL,Q,GAVKF,aCqBLQ,E,uKApBX,OACE,6BACA,yBAAKX,GAAG,YAEX,uBAAGE,UAAU,aAAaU,KAAK,YAAYC,MAAM,mBAAjD,mBACA,uBAAGX,UAAU,aAAaU,KAAK,QAAQC,MAAM,mBAA7C,mBAEA,wBAAIb,GAAG,MAAME,UAAU,OACtB,wBAAIA,UAAU,WAAU,uBAAGA,UAAU,eAAeU,KAAK,SAAjC,SACxB,4BAAI,uBAAGV,UAAU,eAAeU,KAAK,UAAjC,UACJ,4BAAI,uBAAGV,UAAU,eAAeU,KAAK,WAAjC,WACJ,4BAAI,uBAAGV,UAAU,eAAeU,KAAK,WAAjC,kB,GAbYT,aCgCLW,E,uKA5BP,IAAIC,EAAezB,EAAK0B,OAAOD,aAC3BE,EAAS3B,EAAK0B,OAAOC,OAAOnB,KAAI,SAAUmB,GAE1C,OAAO,yBAAKC,IAAKD,EAAO5B,KAAMa,UAAU,wBACpC,yBAAKA,UAAU,QAAQiB,IAAKF,EAAO5B,KAAM+B,IAAMH,EAAOI,YACtD,4BAAKJ,EAAO5B,MACZ,2BAAI4B,EAAOxB,iBAKnB,OACI,6BAASO,GAAG,SAASE,UAAU,oBAAoBI,MAAO,CAACC,gBAAiBC,KAAKC,MAAMC,aACnF,yBAAKR,UAAU,4BACX,4BAAI,iDAGR,6BACI,yBAAKA,UAAU,yBAAwB,uBAAGA,UAAU,eAAea,IAEnE,wBAAIb,UAAU,kBACTe,S,GAxBJd,a,kCCmCNmB,E,kDA5Bb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACVb,WAAY,WAJJ,E,0DASZF,KAAKgB,SAAS,CAACd,WAAYe,IAAYC,SACvCC,QAAQC,IAAIpB,KAAKe,MAAMb,c,+BAEjB,IAAD,OACR,OAEM,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAU2B,eAAgB,IAAKC,MAAOtB,KAAKe,MAAMb,aACjD,kBAAC,EAAD,MACA,yBAAKR,UAAU,iBAAiB6B,QAAS,kBAAI,EAAKC,eAAgBZ,IAAI,sEACtE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOV,WAAYF,KAAKe,MAAMb,aAC9B,kBAAC,EAAD,CAAQA,WAAYF,KAAKe,MAAMb,kB,GAtBrBP,aCGE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.bb0d0cde.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport data from \"../resumeData.json\";\nimport { SocialIcon } from 'react-social-icons';\n\nclass Header extends Component {\n  render() {\n    var name = data.main.name;\n    var occupation = data.main.occupation;\n    var description = data.main.description;\n    var city = data.main.address.city;\n    var networks = data.main.social.map(function (network) {\n        return (\n            <SocialIcon id={network.name} url={network.url}/>\n      );\n    });\n      \n    return (\n      <section id=\"home\" className=\"hero\">\n        <h1>I'm {name}.</h1>\n        <h2>\n          {occupation} in {city}\n        </h2>\n            <p>{description}.</p>\n            <hr />\n            <ul className=\"social\">\n                {networks}\n            </ul>\n      </section>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport data from '../resumeData.json'\n\nclass About extends Component {\n  render() {\n\n      var bio = data.main.bio;\n    \n    return (\n      \n         \t<section id=\"about\" className=\"section\" style={{backgroundColor: this.props.themeColor}}>\n\t\t         <h2>About Me</h2>\n             \n\t\t         <p>{bio}</p>\n             \n\t         </section>\n    );\n  }\n\n\n}\n\nexport default About;","import React, { Component } from \"react\";\n\nclass Menue extends Component {\n  render() {\n    return (\n      <div>\n     \t<nav id=\"nav-wrap\">\n\n\t\t\t<a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\n\t\t\t<a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\n\n\t\t\t<ul id=\"nav\" className=\"nav\">\n\t\t\t\t<li className=\"current\"><a className=\"smoothscroll\" href=\"#home\">Home</a></li>\n\t\t\t\t<li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\n\t\t\t\t<li><a className=\"smoothscroll\" href=\"#skills\">Skills</a></li>\n\t\t\t\t<li><a className=\"smoothscroll\" href=\"#skills\">Skills</a></li>\n\t\t\t</ul>\n\n\t\t</nav>\n\t</div>)\n\n  }\n}\n\nexport default Menue;\n","import React, { Component } from 'react'\nimport data from \"../resumeData.json\";\n\nclass Skills extends Component {\n\n    render() {\n        var skillmessage = data.resume.skillmessage;\n        var skills = data.resume.skills.map(function (skills) {\n            // var projectImage = 'images/tech/' + skills.image;\n            return <div key={skills.name} className=\"columns feature-item\">\n                <img className='skill' alt={skills.name} src= {skills.imagepath} />\n                <h5>{skills.name}</h5>\n                <p>{skills.description}</p>\n            </div>\n        })\n\n\n        return (\n            <section id=\"skills\" className=\"section row skill\" style={{backgroundColor: this.props.themeColor}} >\n                <div className=\"three columns header-col\">\n                    <h1><span>Favorite Tech</span></h1>\n                </div>\n\n                <div>\n                    <div className=\"nine columns main-col\"><p className=\"lead center\">{skillmessage}</p></div>\n\n                    <ul className=\"flex-container\">\n                        {skills}\n                    </ul>\n                </div>\n            </section>)\n\n    }\n}\nexport default Skills","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport About from './Components/About'\nimport Menue from './Components/Menue';\nimport Skills from './Components/Skills'\nimport Snowfall from 'react-snowfall'\nimport RandomColor from 'randomcolor'\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n       themeColor: \"#282c34\" \n    }\n}\n\nchangeColor(){\n   this.setState({themeColor: RandomColor.call()})\n   console.log(this.state.themeColor)\n}\nrender(){  \nreturn (\n\n      <div className=\"site\" >\n        <Snowfall snowflakeCount={200} color={this.state.themeColor}/>\n        <Menue />\n        <img className=\"changestylebtn\" onClick={()=>this.changeColor()}  src=\"https://mojtabaashena.github.io/react-resume/images/magicwand.png\"/>\n        <Header />\n        <About themeColor={this.state.themeColor} />\n        <Skills themeColor={this.state.themeColor} />\n      </div>\n  );\n\n}  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}